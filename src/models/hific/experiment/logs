14:24:30 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
14:24:30 INFO - <module>: Using device cpu
14:27:44 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
14:27:44 INFO - <module>: Using device cpu
14:28:36 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
14:28:36 INFO - <module>: Using device cpu
14:30:28 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
14:30:28 INFO - <module>: Using device cpu
14:30:57 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
14:30:57 INFO - <module>: Using device cpu
14:30:58 INFO - __init__: GAN mode enabled. Training discriminator for 1 steps.
14:31:44 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
14:31:44 INFO - <module>: Using device cpu
14:31:45 INFO - __init__: GAN mode enabled. Training discriminator for 1 steps.
14:34:05 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
14:34:05 INFO - <module>: Using device cpu
14:34:06 INFO - __init__: GAN mode enabled. Training discriminator for 1 steps.
14:59:38 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
14:59:38 INFO - <module>: Using device cpu
14:59:39 INFO - __init__: GAN mode enabled. Training discriminator for 1 steps.
15:05:15 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
15:05:15 INFO - <module>: Using device cpu
15:05:16 INFO - __init__: GAN mode enabled. Training discriminator for 1 steps.
15:05:37 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
15:05:37 INFO - <module>: Using device cpu
15:05:38 INFO - __init__: GAN mode enabled. Training discriminator for 1 steps.
15:05:39 INFO - <module>: HIFICModel(
  (Encoder): Encoder(
    (net): Sequential(
      (0): Sequential(
        (0): ReflectionPad2d((3, 3, 3, 3))
        (1): Conv2d(3, 60, kernel_size=(7, 7), stride=(1, 1))
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (1): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (2): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (3): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (4): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (5): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (Generator): Generator(
    (first_conv_block): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (residual_block0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (up_sample0): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample1): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample2): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample3): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (last_conv_block): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
  )
  (Discriminator): Discriminator(
    (context_conv): Conv2d(220, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    (context_up_sample): Upsample(scale_factor=16.0, mode=nearest)
    (context_activation): LeakyReLU(negative_slope=0.2)
    (conv1): Conv2d(15, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation1): LeakyReLU(negative_slope=0.2)
    (conv2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation2): LeakyReLU(negative_slope=0.2)
    (conv3): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation3): LeakyReLU(negative_slope=0.2)
    (conv4): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation4): LeakyReLU(negative_slope=0.2)
    (conv_out): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
15:05:39 INFO - <module>: ALL PARAMETERS
15:05:39 INFO - <module>: Encoder.net.0.1.weight - torch.Size([60, 3, 7, 7])
15:05:39 INFO - <module>: Encoder.net.0.1.bias - torch.Size([60])
15:05:39 INFO - <module>: Encoder.net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:05:39 INFO - <module>: Encoder.net.0.2.beta - torch.Size([1, 60, 1, 1])
15:05:39 INFO - <module>: Encoder.net.1.1.weight - torch.Size([120, 60, 3, 3])
15:05:39 INFO - <module>: Encoder.net.1.1.bias - torch.Size([120])
15:05:39 INFO - <module>: Encoder.net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:05:39 INFO - <module>: Encoder.net.1.2.beta - torch.Size([1, 120, 1, 1])
15:05:39 INFO - <module>: Encoder.net.2.1.weight - torch.Size([240, 120, 3, 3])
15:05:39 INFO - <module>: Encoder.net.2.1.bias - torch.Size([240])
15:05:39 INFO - <module>: Encoder.net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:05:39 INFO - <module>: Encoder.net.2.2.beta - torch.Size([1, 240, 1, 1])
15:05:39 INFO - <module>: Encoder.net.3.1.weight - torch.Size([480, 240, 3, 3])
15:05:39 INFO - <module>: Encoder.net.3.1.bias - torch.Size([480])
15:05:39 INFO - <module>: Encoder.net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:05:39 INFO - <module>: Encoder.net.3.2.beta - torch.Size([1, 480, 1, 1])
15:05:39 INFO - <module>: Encoder.net.4.1.weight - torch.Size([960, 480, 3, 3])
15:05:39 INFO - <module>: Encoder.net.4.1.bias - torch.Size([960])
15:05:39 INFO - <module>: Encoder.net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Encoder.net.4.2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Encoder.net.5.1.weight - torch.Size([220, 960, 3, 3])
15:05:39 INFO - <module>: Encoder.net.5.1.bias - torch.Size([220])
15:05:39 INFO - <module>: Generator.first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:05:39 INFO - <module>: Generator.first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:05:39 INFO - <module>: Generator.first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:05:39 INFO - <module>: Generator.first_conv_block.2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block0.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block0.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block1.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block1.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block2.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block2.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block3.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block3.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block4.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block4.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block5.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block5.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block6.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block6.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block7.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block7.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block8.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block8.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:05:39 INFO - <module>: Generator.up_sample0.0.bias - torch.Size([480])
15:05:39 INFO - <module>: Generator.up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:05:39 INFO - <module>: Generator.up_sample1.0.bias - torch.Size([240])
15:05:39 INFO - <module>: Generator.up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:05:39 INFO - <module>: Generator.up_sample2.0.bias - torch.Size([120])
15:05:39 INFO - <module>: Generator.up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:05:39 INFO - <module>: Generator.up_sample3.0.bias - torch.Size([60])
15:05:39 INFO - <module>: Generator.up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:05:39 INFO - <module>: Generator.last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:05:39 INFO - <module>: Generator.last_conv_block.1.bias - torch.Size([3])
15:05:39 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
15:05:39 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
15:05:39 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
15:05:39 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
15:05:39 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
15:05:39 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
15:05:39 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
15:05:39 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
15:05:39 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
15:05:39 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
15:05:39 INFO - <module>: Discriminator.context_conv.weight - torch.Size([12, 220, 3, 3])
15:05:39 INFO - <module>: Discriminator.context_conv.bias - torch.Size([12])
15:05:39 INFO - <module>: Discriminator.conv1.bias - torch.Size([64])
15:05:39 INFO - <module>: Discriminator.conv1.weight_orig - torch.Size([64, 15, 4, 4])
15:05:39 INFO - <module>: Discriminator.conv2.bias - torch.Size([128])
15:05:39 INFO - <module>: Discriminator.conv2.weight_orig - torch.Size([128, 64, 4, 4])
15:05:39 INFO - <module>: Discriminator.conv3.bias - torch.Size([256])
15:05:39 INFO - <module>: Discriminator.conv3.weight_orig - torch.Size([256, 128, 4, 4])
15:05:39 INFO - <module>: Discriminator.conv4.bias - torch.Size([512])
15:05:39 INFO - <module>: Discriminator.conv4.weight_orig - torch.Size([512, 256, 4, 4])
15:05:39 INFO - <module>: Discriminator.conv_out.weight - torch.Size([1, 512, 1, 1])
15:05:39 INFO - <module>: Discriminator.conv_out.bias - torch.Size([1])
15:05:39 INFO - <module>: AMORTIZATION PARAMETERS
15:05:39 INFO - <module>: net.0.1.weight - torch.Size([60, 3, 7, 7])
15:05:39 INFO - <module>: net.0.1.bias - torch.Size([60])
15:05:39 INFO - <module>: net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:05:39 INFO - <module>: net.0.2.beta - torch.Size([1, 60, 1, 1])
15:05:39 INFO - <module>: net.1.1.weight - torch.Size([120, 60, 3, 3])
15:05:39 INFO - <module>: net.1.1.bias - torch.Size([120])
15:05:39 INFO - <module>: net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:05:39 INFO - <module>: net.1.2.beta - torch.Size([1, 120, 1, 1])
15:05:39 INFO - <module>: net.2.1.weight - torch.Size([240, 120, 3, 3])
15:05:39 INFO - <module>: net.2.1.bias - torch.Size([240])
15:05:39 INFO - <module>: net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:05:39 INFO - <module>: net.2.2.beta - torch.Size([1, 240, 1, 1])
15:05:39 INFO - <module>: net.3.1.weight - torch.Size([480, 240, 3, 3])
15:05:39 INFO - <module>: net.3.1.bias - torch.Size([480])
15:05:39 INFO - <module>: net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:05:39 INFO - <module>: net.3.2.beta - torch.Size([1, 480, 1, 1])
15:05:39 INFO - <module>: net.4.1.weight - torch.Size([960, 480, 3, 3])
15:05:39 INFO - <module>: net.4.1.bias - torch.Size([960])
15:05:39 INFO - <module>: net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: net.4.2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: net.5.1.weight - torch.Size([220, 960, 3, 3])
15:05:39 INFO - <module>: net.5.1.bias - torch.Size([220])
15:05:39 INFO - <module>: first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:05:39 INFO - <module>: first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:05:39 INFO - <module>: first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:05:39 INFO - <module>: first_conv_block.2.bias - torch.Size([960])
15:05:39 INFO - <module>: first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block0.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block0.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block1.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block1.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block2.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block2.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block3.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block3.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block4.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block4.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block5.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block5.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block6.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block6.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block7.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block7.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block8.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: residual_block8.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:05:39 INFO - <module>: up_sample0.0.bias - torch.Size([480])
15:05:39 INFO - <module>: up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:05:39 INFO - <module>: up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:05:39 INFO - <module>: up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:05:39 INFO - <module>: up_sample1.0.bias - torch.Size([240])
15:05:39 INFO - <module>: up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:05:39 INFO - <module>: up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:05:39 INFO - <module>: up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:05:39 INFO - <module>: up_sample2.0.bias - torch.Size([120])
15:05:39 INFO - <module>: up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:05:39 INFO - <module>: up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:05:39 INFO - <module>: up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:05:39 INFO - <module>: up_sample3.0.bias - torch.Size([60])
15:05:39 INFO - <module>: up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:05:39 INFO - <module>: up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:05:39 INFO - <module>: last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:05:39 INFO - <module>: last_conv_block.1.bias - torch.Size([3])
15:05:39 INFO - <module>: conv1.weight - torch.Size([320, 220, 3, 3])
15:05:39 INFO - <module>: conv1.bias - torch.Size([320])
15:05:39 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: conv2.bias - torch.Size([320])
15:05:39 INFO - <module>: conv3.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: conv3.bias - torch.Size([320])
15:05:39 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: conv1.bias - torch.Size([320])
15:05:39 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: conv2.bias - torch.Size([320])
15:05:39 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
15:05:39 INFO - <module>: conv3.bias - torch.Size([220])
15:05:39 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: conv1.bias - torch.Size([320])
15:05:39 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: conv2.bias - torch.Size([320])
15:05:39 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
15:05:39 INFO - <module>: conv3.bias - torch.Size([220])
15:05:39 INFO - <module>: AMORTIZATION PARAMETERS
15:05:39 INFO - <module>: Encoder.net.0.1.weight - torch.Size([60, 3, 7, 7])
15:05:39 INFO - <module>: Encoder.net.0.1.bias - torch.Size([60])
15:05:39 INFO - <module>: Encoder.net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:05:39 INFO - <module>: Encoder.net.0.2.beta - torch.Size([1, 60, 1, 1])
15:05:39 INFO - <module>: Encoder.net.1.1.weight - torch.Size([120, 60, 3, 3])
15:05:39 INFO - <module>: Encoder.net.1.1.bias - torch.Size([120])
15:05:39 INFO - <module>: Encoder.net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:05:39 INFO - <module>: Encoder.net.1.2.beta - torch.Size([1, 120, 1, 1])
15:05:39 INFO - <module>: Encoder.net.2.1.weight - torch.Size([240, 120, 3, 3])
15:05:39 INFO - <module>: Encoder.net.2.1.bias - torch.Size([240])
15:05:39 INFO - <module>: Encoder.net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:05:39 INFO - <module>: Encoder.net.2.2.beta - torch.Size([1, 240, 1, 1])
15:05:39 INFO - <module>: Encoder.net.3.1.weight - torch.Size([480, 240, 3, 3])
15:05:39 INFO - <module>: Encoder.net.3.1.bias - torch.Size([480])
15:05:39 INFO - <module>: Encoder.net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:05:39 INFO - <module>: Encoder.net.3.2.beta - torch.Size([1, 480, 1, 1])
15:05:39 INFO - <module>: Encoder.net.4.1.weight - torch.Size([960, 480, 3, 3])
15:05:39 INFO - <module>: Encoder.net.4.1.bias - torch.Size([960])
15:05:39 INFO - <module>: Encoder.net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Encoder.net.4.2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Encoder.net.5.1.weight - torch.Size([220, 960, 3, 3])
15:05:39 INFO - <module>: Encoder.net.5.1.bias - torch.Size([220])
15:05:39 INFO - <module>: Generator.first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:05:39 INFO - <module>: Generator.first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:05:39 INFO - <module>: Generator.first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:05:39 INFO - <module>: Generator.first_conv_block.2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block0.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block0.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block1.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block1.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block2.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block2.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block3.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block3.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block4.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block4.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block5.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block5.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block6.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block6.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block7.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block7.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block8.conv1.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:05:39 INFO - <module>: Generator.residual_block8.conv2.bias - torch.Size([960])
15:05:39 INFO - <module>: Generator.residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:05:39 INFO - <module>: Generator.up_sample0.0.bias - torch.Size([480])
15:05:39 INFO - <module>: Generator.up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:05:39 INFO - <module>: Generator.up_sample1.0.bias - torch.Size([240])
15:05:39 INFO - <module>: Generator.up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:05:39 INFO - <module>: Generator.up_sample2.0.bias - torch.Size([120])
15:05:39 INFO - <module>: Generator.up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:05:39 INFO - <module>: Generator.up_sample3.0.bias - torch.Size([60])
15:05:39 INFO - <module>: Generator.up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:05:39 INFO - <module>: Generator.up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:05:39 INFO - <module>: Generator.last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:05:39 INFO - <module>: Generator.last_conv_block.1.bias - torch.Size([3])
15:05:39 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
15:05:39 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
15:05:39 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
15:05:39 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
15:05:39 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
15:05:39 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
15:05:39 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
15:05:39 INFO - <module>: HYPERPRIOR PARAMETERS
15:05:39 INFO - <module>: H_0 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: a_0 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: b_0 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: H_1 - torch.Size([320, 3, 3])
15:05:39 INFO - <module>: a_1 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: b_1 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: H_2 - torch.Size([320, 3, 3])
15:05:39 INFO - <module>: a_2 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: b_2 - torch.Size([320, 3, 1])
15:05:39 INFO - <module>: H_3 - torch.Size([320, 1, 3])
15:05:39 INFO - <module>: a_3 - torch.Size([320, 1, 1])
15:05:39 INFO - <module>: b_3 - torch.Size([320, 1, 1])
15:05:39 INFO - <module>: DISCRIMINATOR PARAMETERS
15:05:39 INFO - <module>: context_conv.weight - torch.Size([12, 220, 3, 3])
15:05:39 INFO - <module>: context_conv.bias - torch.Size([12])
15:05:39 INFO - <module>: conv1.bias - torch.Size([64])
15:05:39 INFO - <module>: conv1.weight_orig - torch.Size([64, 15, 4, 4])
15:05:39 INFO - <module>: conv2.bias - torch.Size([128])
15:05:39 INFO - <module>: conv2.weight_orig - torch.Size([128, 64, 4, 4])
15:05:39 INFO - <module>: conv3.bias - torch.Size([256])
15:05:39 INFO - <module>: conv3.weight_orig - torch.Size([256, 128, 4, 4])
15:05:39 INFO - <module>: conv4.bias - torch.Size([512])
15:05:39 INFO - <module>: conv4.weight_orig - torch.Size([512, 256, 4, 4])
15:05:39 INFO - <module>: conv_out.weight - torch.Size([1, 512, 1, 1])
15:05:39 INFO - <module>: conv_out.bias - torch.Size([1])
15:05:39 INFO - <module>: Number of trainable parameters: 184268780
15:05:39 INFO - <module>: Estimated size: 737.07512 MB
15:05:39 INFO - <module>: Starting forward pass with input shape [10, 3, 256, 256]
15:06:04 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
15:06:04 INFO - <module>: Using device cpu
15:06:05 INFO - __init__: GAN mode enabled. Training discriminator for 1 steps.
15:06:06 INFO - <module>: HIFICModel(
  (Encoder): Encoder(
    (net): Sequential(
      (0): Sequential(
        (0): ReflectionPad2d((3, 3, 3, 3))
        (1): Conv2d(3, 60, kernel_size=(7, 7), stride=(1, 1))
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (1): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (2): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (3): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (4): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (5): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (Generator): Generator(
    (first_conv_block): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (residual_block0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (up_sample0): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample1): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample2): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample3): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (last_conv_block): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
  )
  (Discriminator): Discriminator(
    (context_conv): Conv2d(220, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    (context_up_sample): Upsample(scale_factor=16.0, mode=nearest)
    (context_activation): LeakyReLU(negative_slope=0.2)
    (conv1): Conv2d(15, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation1): LeakyReLU(negative_slope=0.2)
    (conv2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation2): LeakyReLU(negative_slope=0.2)
    (conv3): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation3): LeakyReLU(negative_slope=0.2)
    (conv4): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation4): LeakyReLU(negative_slope=0.2)
    (conv_out): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
15:06:06 INFO - <module>: ALL PARAMETERS
15:06:06 INFO - <module>: Encoder.net.0.1.weight - torch.Size([60, 3, 7, 7])
15:06:06 INFO - <module>: Encoder.net.0.1.bias - torch.Size([60])
15:06:06 INFO - <module>: Encoder.net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:06:06 INFO - <module>: Encoder.net.0.2.beta - torch.Size([1, 60, 1, 1])
15:06:06 INFO - <module>: Encoder.net.1.1.weight - torch.Size([120, 60, 3, 3])
15:06:06 INFO - <module>: Encoder.net.1.1.bias - torch.Size([120])
15:06:06 INFO - <module>: Encoder.net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:06:06 INFO - <module>: Encoder.net.1.2.beta - torch.Size([1, 120, 1, 1])
15:06:06 INFO - <module>: Encoder.net.2.1.weight - torch.Size([240, 120, 3, 3])
15:06:06 INFO - <module>: Encoder.net.2.1.bias - torch.Size([240])
15:06:06 INFO - <module>: Encoder.net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:06:06 INFO - <module>: Encoder.net.2.2.beta - torch.Size([1, 240, 1, 1])
15:06:06 INFO - <module>: Encoder.net.3.1.weight - torch.Size([480, 240, 3, 3])
15:06:06 INFO - <module>: Encoder.net.3.1.bias - torch.Size([480])
15:06:06 INFO - <module>: Encoder.net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:06:06 INFO - <module>: Encoder.net.3.2.beta - torch.Size([1, 480, 1, 1])
15:06:06 INFO - <module>: Encoder.net.4.1.weight - torch.Size([960, 480, 3, 3])
15:06:06 INFO - <module>: Encoder.net.4.1.bias - torch.Size([960])
15:06:06 INFO - <module>: Encoder.net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Encoder.net.4.2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Encoder.net.5.1.weight - torch.Size([220, 960, 3, 3])
15:06:06 INFO - <module>: Encoder.net.5.1.bias - torch.Size([220])
15:06:06 INFO - <module>: Generator.first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:06:06 INFO - <module>: Generator.first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:06:06 INFO - <module>: Generator.first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:06:06 INFO - <module>: Generator.first_conv_block.2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block0.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block0.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block1.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block1.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block2.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block2.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block3.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block3.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block4.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block4.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block5.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block5.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block6.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block6.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block7.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block7.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block8.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block8.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:06:06 INFO - <module>: Generator.up_sample0.0.bias - torch.Size([480])
15:06:06 INFO - <module>: Generator.up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:06:06 INFO - <module>: Generator.up_sample1.0.bias - torch.Size([240])
15:06:06 INFO - <module>: Generator.up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:06:06 INFO - <module>: Generator.up_sample2.0.bias - torch.Size([120])
15:06:06 INFO - <module>: Generator.up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:06:06 INFO - <module>: Generator.up_sample3.0.bias - torch.Size([60])
15:06:06 INFO - <module>: Generator.up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:06:06 INFO - <module>: Generator.last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:06:06 INFO - <module>: Generator.last_conv_block.1.bias - torch.Size([3])
15:06:06 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
15:06:06 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
15:06:06 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
15:06:06 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
15:06:06 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
15:06:06 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
15:06:06 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
15:06:06 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
15:06:06 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
15:06:06 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
15:06:06 INFO - <module>: Discriminator.context_conv.weight - torch.Size([12, 220, 3, 3])
15:06:06 INFO - <module>: Discriminator.context_conv.bias - torch.Size([12])
15:06:06 INFO - <module>: Discriminator.conv1.bias - torch.Size([64])
15:06:06 INFO - <module>: Discriminator.conv1.weight_orig - torch.Size([64, 15, 4, 4])
15:06:06 INFO - <module>: Discriminator.conv2.bias - torch.Size([128])
15:06:06 INFO - <module>: Discriminator.conv2.weight_orig - torch.Size([128, 64, 4, 4])
15:06:06 INFO - <module>: Discriminator.conv3.bias - torch.Size([256])
15:06:06 INFO - <module>: Discriminator.conv3.weight_orig - torch.Size([256, 128, 4, 4])
15:06:06 INFO - <module>: Discriminator.conv4.bias - torch.Size([512])
15:06:06 INFO - <module>: Discriminator.conv4.weight_orig - torch.Size([512, 256, 4, 4])
15:06:06 INFO - <module>: Discriminator.conv_out.weight - torch.Size([1, 512, 1, 1])
15:06:06 INFO - <module>: Discriminator.conv_out.bias - torch.Size([1])
15:06:06 INFO - <module>: AMORTIZATION PARAMETERS
15:06:06 INFO - <module>: net.0.1.weight - torch.Size([60, 3, 7, 7])
15:06:06 INFO - <module>: net.0.1.bias - torch.Size([60])
15:06:06 INFO - <module>: net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:06:06 INFO - <module>: net.0.2.beta - torch.Size([1, 60, 1, 1])
15:06:06 INFO - <module>: net.1.1.weight - torch.Size([120, 60, 3, 3])
15:06:06 INFO - <module>: net.1.1.bias - torch.Size([120])
15:06:06 INFO - <module>: net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:06:06 INFO - <module>: net.1.2.beta - torch.Size([1, 120, 1, 1])
15:06:06 INFO - <module>: net.2.1.weight - torch.Size([240, 120, 3, 3])
15:06:06 INFO - <module>: net.2.1.bias - torch.Size([240])
15:06:06 INFO - <module>: net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:06:06 INFO - <module>: net.2.2.beta - torch.Size([1, 240, 1, 1])
15:06:06 INFO - <module>: net.3.1.weight - torch.Size([480, 240, 3, 3])
15:06:06 INFO - <module>: net.3.1.bias - torch.Size([480])
15:06:06 INFO - <module>: net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:06:06 INFO - <module>: net.3.2.beta - torch.Size([1, 480, 1, 1])
15:06:06 INFO - <module>: net.4.1.weight - torch.Size([960, 480, 3, 3])
15:06:06 INFO - <module>: net.4.1.bias - torch.Size([960])
15:06:06 INFO - <module>: net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: net.4.2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: net.5.1.weight - torch.Size([220, 960, 3, 3])
15:06:06 INFO - <module>: net.5.1.bias - torch.Size([220])
15:06:06 INFO - <module>: first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:06:06 INFO - <module>: first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:06:06 INFO - <module>: first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:06:06 INFO - <module>: first_conv_block.2.bias - torch.Size([960])
15:06:06 INFO - <module>: first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block0.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block0.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block1.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block1.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block2.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block2.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block3.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block3.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block4.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block4.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block5.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block5.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block6.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block6.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block7.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block7.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block8.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: residual_block8.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:06:06 INFO - <module>: up_sample0.0.bias - torch.Size([480])
15:06:06 INFO - <module>: up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:06:06 INFO - <module>: up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:06:06 INFO - <module>: up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:06:06 INFO - <module>: up_sample1.0.bias - torch.Size([240])
15:06:06 INFO - <module>: up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:06:06 INFO - <module>: up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:06:06 INFO - <module>: up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:06:06 INFO - <module>: up_sample2.0.bias - torch.Size([120])
15:06:06 INFO - <module>: up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:06:06 INFO - <module>: up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:06:06 INFO - <module>: up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:06:06 INFO - <module>: up_sample3.0.bias - torch.Size([60])
15:06:06 INFO - <module>: up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:06:06 INFO - <module>: up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:06:06 INFO - <module>: last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:06:06 INFO - <module>: last_conv_block.1.bias - torch.Size([3])
15:06:06 INFO - <module>: conv1.weight - torch.Size([320, 220, 3, 3])
15:06:06 INFO - <module>: conv1.bias - torch.Size([320])
15:06:06 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: conv2.bias - torch.Size([320])
15:06:06 INFO - <module>: conv3.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: conv3.bias - torch.Size([320])
15:06:06 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: conv1.bias - torch.Size([320])
15:06:06 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: conv2.bias - torch.Size([320])
15:06:06 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
15:06:06 INFO - <module>: conv3.bias - torch.Size([220])
15:06:06 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: conv1.bias - torch.Size([320])
15:06:06 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: conv2.bias - torch.Size([320])
15:06:06 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
15:06:06 INFO - <module>: conv3.bias - torch.Size([220])
15:06:06 INFO - <module>: AMORTIZATION PARAMETERS
15:06:06 INFO - <module>: Encoder.net.0.1.weight - torch.Size([60, 3, 7, 7])
15:06:06 INFO - <module>: Encoder.net.0.1.bias - torch.Size([60])
15:06:06 INFO - <module>: Encoder.net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:06:06 INFO - <module>: Encoder.net.0.2.beta - torch.Size([1, 60, 1, 1])
15:06:06 INFO - <module>: Encoder.net.1.1.weight - torch.Size([120, 60, 3, 3])
15:06:06 INFO - <module>: Encoder.net.1.1.bias - torch.Size([120])
15:06:06 INFO - <module>: Encoder.net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:06:06 INFO - <module>: Encoder.net.1.2.beta - torch.Size([1, 120, 1, 1])
15:06:06 INFO - <module>: Encoder.net.2.1.weight - torch.Size([240, 120, 3, 3])
15:06:06 INFO - <module>: Encoder.net.2.1.bias - torch.Size([240])
15:06:06 INFO - <module>: Encoder.net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:06:06 INFO - <module>: Encoder.net.2.2.beta - torch.Size([1, 240, 1, 1])
15:06:06 INFO - <module>: Encoder.net.3.1.weight - torch.Size([480, 240, 3, 3])
15:06:06 INFO - <module>: Encoder.net.3.1.bias - torch.Size([480])
15:06:06 INFO - <module>: Encoder.net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:06:06 INFO - <module>: Encoder.net.3.2.beta - torch.Size([1, 480, 1, 1])
15:06:06 INFO - <module>: Encoder.net.4.1.weight - torch.Size([960, 480, 3, 3])
15:06:06 INFO - <module>: Encoder.net.4.1.bias - torch.Size([960])
15:06:06 INFO - <module>: Encoder.net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Encoder.net.4.2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Encoder.net.5.1.weight - torch.Size([220, 960, 3, 3])
15:06:06 INFO - <module>: Encoder.net.5.1.bias - torch.Size([220])
15:06:06 INFO - <module>: Generator.first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:06:06 INFO - <module>: Generator.first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:06:06 INFO - <module>: Generator.first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:06:06 INFO - <module>: Generator.first_conv_block.2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block0.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block0.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block1.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block1.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block2.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block2.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block3.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block3.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block4.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block4.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block5.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block5.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block6.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block6.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block7.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block7.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block8.conv1.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:06:06 INFO - <module>: Generator.residual_block8.conv2.bias - torch.Size([960])
15:06:06 INFO - <module>: Generator.residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:06:06 INFO - <module>: Generator.up_sample0.0.bias - torch.Size([480])
15:06:06 INFO - <module>: Generator.up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:06:06 INFO - <module>: Generator.up_sample1.0.bias - torch.Size([240])
15:06:06 INFO - <module>: Generator.up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:06:06 INFO - <module>: Generator.up_sample2.0.bias - torch.Size([120])
15:06:06 INFO - <module>: Generator.up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:06:06 INFO - <module>: Generator.up_sample3.0.bias - torch.Size([60])
15:06:06 INFO - <module>: Generator.up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:06:06 INFO - <module>: Generator.up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:06:06 INFO - <module>: Generator.last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:06:06 INFO - <module>: Generator.last_conv_block.1.bias - torch.Size([3])
15:06:06 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
15:06:06 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
15:06:06 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
15:06:06 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
15:06:06 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
15:06:06 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
15:06:06 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
15:06:06 INFO - <module>: HYPERPRIOR PARAMETERS
15:06:06 INFO - <module>: H_0 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: a_0 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: b_0 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: H_1 - torch.Size([320, 3, 3])
15:06:06 INFO - <module>: a_1 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: b_1 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: H_2 - torch.Size([320, 3, 3])
15:06:06 INFO - <module>: a_2 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: b_2 - torch.Size([320, 3, 1])
15:06:06 INFO - <module>: H_3 - torch.Size([320, 1, 3])
15:06:06 INFO - <module>: a_3 - torch.Size([320, 1, 1])
15:06:06 INFO - <module>: b_3 - torch.Size([320, 1, 1])
15:06:06 INFO - <module>: DISCRIMINATOR PARAMETERS
15:06:06 INFO - <module>: context_conv.weight - torch.Size([12, 220, 3, 3])
15:06:06 INFO - <module>: context_conv.bias - torch.Size([12])
15:06:06 INFO - <module>: conv1.bias - torch.Size([64])
15:06:06 INFO - <module>: conv1.weight_orig - torch.Size([64, 15, 4, 4])
15:06:06 INFO - <module>: conv2.bias - torch.Size([128])
15:06:06 INFO - <module>: conv2.weight_orig - torch.Size([128, 64, 4, 4])
15:06:06 INFO - <module>: conv3.bias - torch.Size([256])
15:06:06 INFO - <module>: conv3.weight_orig - torch.Size([256, 128, 4, 4])
15:06:06 INFO - <module>: conv4.bias - torch.Size([512])
15:06:06 INFO - <module>: conv4.weight_orig - torch.Size([512, 256, 4, 4])
15:06:06 INFO - <module>: conv_out.weight - torch.Size([1, 512, 1, 1])
15:06:06 INFO - <module>: conv_out.bias - torch.Size([1])
15:06:06 INFO - <module>: Number of trainable parameters: 184268780
15:06:06 INFO - <module>: Estimated size: 737.07512 MB
15:06:06 INFO - <module>: Starting forward pass with input shape [10, 3, 256, 256]
15:17:59 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
15:17:59 INFO - <module>: Using device cpu
15:18:00 INFO - __init__: GAN mode enabled. Training discriminator for 1 steps.
15:18:01 INFO - <module>: HIFICModel(
  (Encoder): Encoder(
    (net): Sequential(
      (0): Sequential(
        (0): ReflectionPad2d((3, 3, 3, 3))
        (1): Conv2d(3, 60, kernel_size=(7, 7), stride=(1, 1))
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (1): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (2): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (3): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (4): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (5): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (Generator): Generator(
    (first_conv_block): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (residual_block0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (up_sample0): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample1): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample2): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample3): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (last_conv_block): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
  )
  (Discriminator): Discriminator(
    (context_conv): Conv2d(220, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    (context_up_sample): Upsample(scale_factor=16.0, mode=nearest)
    (context_activation): LeakyReLU(negative_slope=0.2)
    (conv1): Conv2d(15, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation1): LeakyReLU(negative_slope=0.2)
    (conv2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation2): LeakyReLU(negative_slope=0.2)
    (conv3): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation3): LeakyReLU(negative_slope=0.2)
    (conv4): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation4): LeakyReLU(negative_slope=0.2)
    (conv_out): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
15:18:01 INFO - <module>: ALL PARAMETERS
15:18:01 INFO - <module>: Encoder.net.0.1.weight - torch.Size([60, 3, 7, 7])
15:18:01 INFO - <module>: Encoder.net.0.1.bias - torch.Size([60])
15:18:01 INFO - <module>: Encoder.net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:18:01 INFO - <module>: Encoder.net.0.2.beta - torch.Size([1, 60, 1, 1])
15:18:01 INFO - <module>: Encoder.net.1.1.weight - torch.Size([120, 60, 3, 3])
15:18:01 INFO - <module>: Encoder.net.1.1.bias - torch.Size([120])
15:18:01 INFO - <module>: Encoder.net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:18:01 INFO - <module>: Encoder.net.1.2.beta - torch.Size([1, 120, 1, 1])
15:18:01 INFO - <module>: Encoder.net.2.1.weight - torch.Size([240, 120, 3, 3])
15:18:01 INFO - <module>: Encoder.net.2.1.bias - torch.Size([240])
15:18:01 INFO - <module>: Encoder.net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:18:01 INFO - <module>: Encoder.net.2.2.beta - torch.Size([1, 240, 1, 1])
15:18:01 INFO - <module>: Encoder.net.3.1.weight - torch.Size([480, 240, 3, 3])
15:18:01 INFO - <module>: Encoder.net.3.1.bias - torch.Size([480])
15:18:01 INFO - <module>: Encoder.net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:18:01 INFO - <module>: Encoder.net.3.2.beta - torch.Size([1, 480, 1, 1])
15:18:01 INFO - <module>: Encoder.net.4.1.weight - torch.Size([960, 480, 3, 3])
15:18:01 INFO - <module>: Encoder.net.4.1.bias - torch.Size([960])
15:18:01 INFO - <module>: Encoder.net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Encoder.net.4.2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Encoder.net.5.1.weight - torch.Size([220, 960, 3, 3])
15:18:01 INFO - <module>: Encoder.net.5.1.bias - torch.Size([220])
15:18:01 INFO - <module>: Generator.first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:18:01 INFO - <module>: Generator.first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:18:01 INFO - <module>: Generator.first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:18:01 INFO - <module>: Generator.first_conv_block.2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block0.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block0.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block1.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block1.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block2.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block2.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block3.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block3.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block4.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block4.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block5.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block5.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block6.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block6.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block7.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block7.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block8.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block8.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:18:01 INFO - <module>: Generator.up_sample0.0.bias - torch.Size([480])
15:18:01 INFO - <module>: Generator.up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:18:01 INFO - <module>: Generator.up_sample1.0.bias - torch.Size([240])
15:18:01 INFO - <module>: Generator.up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:18:01 INFO - <module>: Generator.up_sample2.0.bias - torch.Size([120])
15:18:01 INFO - <module>: Generator.up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:18:01 INFO - <module>: Generator.up_sample3.0.bias - torch.Size([60])
15:18:01 INFO - <module>: Generator.up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:18:01 INFO - <module>: Generator.last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:18:01 INFO - <module>: Generator.last_conv_block.1.bias - torch.Size([3])
15:18:01 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
15:18:01 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
15:18:01 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
15:18:01 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
15:18:01 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
15:18:01 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
15:18:01 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
15:18:01 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
15:18:01 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
15:18:01 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
15:18:01 INFO - <module>: Discriminator.context_conv.weight - torch.Size([12, 220, 3, 3])
15:18:01 INFO - <module>: Discriminator.context_conv.bias - torch.Size([12])
15:18:01 INFO - <module>: Discriminator.conv1.bias - torch.Size([64])
15:18:01 INFO - <module>: Discriminator.conv1.weight_orig - torch.Size([64, 15, 4, 4])
15:18:01 INFO - <module>: Discriminator.conv2.bias - torch.Size([128])
15:18:01 INFO - <module>: Discriminator.conv2.weight_orig - torch.Size([128, 64, 4, 4])
15:18:01 INFO - <module>: Discriminator.conv3.bias - torch.Size([256])
15:18:01 INFO - <module>: Discriminator.conv3.weight_orig - torch.Size([256, 128, 4, 4])
15:18:01 INFO - <module>: Discriminator.conv4.bias - torch.Size([512])
15:18:01 INFO - <module>: Discriminator.conv4.weight_orig - torch.Size([512, 256, 4, 4])
15:18:01 INFO - <module>: Discriminator.conv_out.weight - torch.Size([1, 512, 1, 1])
15:18:01 INFO - <module>: Discriminator.conv_out.bias - torch.Size([1])
15:18:01 INFO - <module>: AMORTIZATION PARAMETERS
15:18:01 INFO - <module>: net.0.1.weight - torch.Size([60, 3, 7, 7])
15:18:01 INFO - <module>: net.0.1.bias - torch.Size([60])
15:18:01 INFO - <module>: net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:18:01 INFO - <module>: net.0.2.beta - torch.Size([1, 60, 1, 1])
15:18:01 INFO - <module>: net.1.1.weight - torch.Size([120, 60, 3, 3])
15:18:01 INFO - <module>: net.1.1.bias - torch.Size([120])
15:18:01 INFO - <module>: net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:18:01 INFO - <module>: net.1.2.beta - torch.Size([1, 120, 1, 1])
15:18:01 INFO - <module>: net.2.1.weight - torch.Size([240, 120, 3, 3])
15:18:01 INFO - <module>: net.2.1.bias - torch.Size([240])
15:18:01 INFO - <module>: net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:18:01 INFO - <module>: net.2.2.beta - torch.Size([1, 240, 1, 1])
15:18:01 INFO - <module>: net.3.1.weight - torch.Size([480, 240, 3, 3])
15:18:01 INFO - <module>: net.3.1.bias - torch.Size([480])
15:18:01 INFO - <module>: net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:18:01 INFO - <module>: net.3.2.beta - torch.Size([1, 480, 1, 1])
15:18:01 INFO - <module>: net.4.1.weight - torch.Size([960, 480, 3, 3])
15:18:01 INFO - <module>: net.4.1.bias - torch.Size([960])
15:18:01 INFO - <module>: net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: net.4.2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: net.5.1.weight - torch.Size([220, 960, 3, 3])
15:18:01 INFO - <module>: net.5.1.bias - torch.Size([220])
15:18:01 INFO - <module>: first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:18:01 INFO - <module>: first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:18:01 INFO - <module>: first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:18:01 INFO - <module>: first_conv_block.2.bias - torch.Size([960])
15:18:01 INFO - <module>: first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block0.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block0.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block1.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block1.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block2.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block2.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block3.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block3.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block4.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block4.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block5.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block5.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block6.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block6.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block7.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block7.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block8.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: residual_block8.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:18:01 INFO - <module>: up_sample0.0.bias - torch.Size([480])
15:18:01 INFO - <module>: up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:18:01 INFO - <module>: up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:18:01 INFO - <module>: up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:18:01 INFO - <module>: up_sample1.0.bias - torch.Size([240])
15:18:01 INFO - <module>: up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:18:01 INFO - <module>: up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:18:01 INFO - <module>: up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:18:01 INFO - <module>: up_sample2.0.bias - torch.Size([120])
15:18:01 INFO - <module>: up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:18:01 INFO - <module>: up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:18:01 INFO - <module>: up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:18:01 INFO - <module>: up_sample3.0.bias - torch.Size([60])
15:18:01 INFO - <module>: up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:18:01 INFO - <module>: up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:18:01 INFO - <module>: last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:18:01 INFO - <module>: last_conv_block.1.bias - torch.Size([3])
15:18:01 INFO - <module>: conv1.weight - torch.Size([320, 220, 3, 3])
15:18:01 INFO - <module>: conv1.bias - torch.Size([320])
15:18:01 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: conv2.bias - torch.Size([320])
15:18:01 INFO - <module>: conv3.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: conv3.bias - torch.Size([320])
15:18:01 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: conv1.bias - torch.Size([320])
15:18:01 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: conv2.bias - torch.Size([320])
15:18:01 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
15:18:01 INFO - <module>: conv3.bias - torch.Size([220])
15:18:01 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: conv1.bias - torch.Size([320])
15:18:01 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: conv2.bias - torch.Size([320])
15:18:01 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
15:18:01 INFO - <module>: conv3.bias - torch.Size([220])
15:18:01 INFO - <module>: AMORTIZATION PARAMETERS
15:18:01 INFO - <module>: Encoder.net.0.1.weight - torch.Size([60, 3, 7, 7])
15:18:01 INFO - <module>: Encoder.net.0.1.bias - torch.Size([60])
15:18:01 INFO - <module>: Encoder.net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:18:01 INFO - <module>: Encoder.net.0.2.beta - torch.Size([1, 60, 1, 1])
15:18:01 INFO - <module>: Encoder.net.1.1.weight - torch.Size([120, 60, 3, 3])
15:18:01 INFO - <module>: Encoder.net.1.1.bias - torch.Size([120])
15:18:01 INFO - <module>: Encoder.net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:18:01 INFO - <module>: Encoder.net.1.2.beta - torch.Size([1, 120, 1, 1])
15:18:01 INFO - <module>: Encoder.net.2.1.weight - torch.Size([240, 120, 3, 3])
15:18:01 INFO - <module>: Encoder.net.2.1.bias - torch.Size([240])
15:18:01 INFO - <module>: Encoder.net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:18:01 INFO - <module>: Encoder.net.2.2.beta - torch.Size([1, 240, 1, 1])
15:18:01 INFO - <module>: Encoder.net.3.1.weight - torch.Size([480, 240, 3, 3])
15:18:01 INFO - <module>: Encoder.net.3.1.bias - torch.Size([480])
15:18:01 INFO - <module>: Encoder.net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:18:01 INFO - <module>: Encoder.net.3.2.beta - torch.Size([1, 480, 1, 1])
15:18:01 INFO - <module>: Encoder.net.4.1.weight - torch.Size([960, 480, 3, 3])
15:18:01 INFO - <module>: Encoder.net.4.1.bias - torch.Size([960])
15:18:01 INFO - <module>: Encoder.net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Encoder.net.4.2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Encoder.net.5.1.weight - torch.Size([220, 960, 3, 3])
15:18:01 INFO - <module>: Encoder.net.5.1.bias - torch.Size([220])
15:18:01 INFO - <module>: Generator.first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:18:01 INFO - <module>: Generator.first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:18:01 INFO - <module>: Generator.first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:18:01 INFO - <module>: Generator.first_conv_block.2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block0.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block0.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block1.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block1.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block2.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block2.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block3.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block3.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block4.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block4.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block5.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block5.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block6.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block6.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block7.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block7.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block8.conv1.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:18:01 INFO - <module>: Generator.residual_block8.conv2.bias - torch.Size([960])
15:18:01 INFO - <module>: Generator.residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:18:01 INFO - <module>: Generator.up_sample0.0.bias - torch.Size([480])
15:18:01 INFO - <module>: Generator.up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:18:01 INFO - <module>: Generator.up_sample1.0.bias - torch.Size([240])
15:18:01 INFO - <module>: Generator.up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:18:01 INFO - <module>: Generator.up_sample2.0.bias - torch.Size([120])
15:18:01 INFO - <module>: Generator.up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:18:01 INFO - <module>: Generator.up_sample3.0.bias - torch.Size([60])
15:18:01 INFO - <module>: Generator.up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:18:01 INFO - <module>: Generator.up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:18:01 INFO - <module>: Generator.last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:18:01 INFO - <module>: Generator.last_conv_block.1.bias - torch.Size([3])
15:18:01 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
15:18:01 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
15:18:01 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
15:18:01 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
15:18:01 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
15:18:01 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
15:18:01 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
15:18:01 INFO - <module>: HYPERPRIOR PARAMETERS
15:18:01 INFO - <module>: H_0 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: a_0 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: b_0 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: H_1 - torch.Size([320, 3, 3])
15:18:01 INFO - <module>: a_1 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: b_1 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: H_2 - torch.Size([320, 3, 3])
15:18:01 INFO - <module>: a_2 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: b_2 - torch.Size([320, 3, 1])
15:18:01 INFO - <module>: H_3 - torch.Size([320, 1, 3])
15:18:01 INFO - <module>: a_3 - torch.Size([320, 1, 1])
15:18:01 INFO - <module>: b_3 - torch.Size([320, 1, 1])
15:18:01 INFO - <module>: DISCRIMINATOR PARAMETERS
15:18:01 INFO - <module>: context_conv.weight - torch.Size([12, 220, 3, 3])
15:18:01 INFO - <module>: context_conv.bias - torch.Size([12])
15:18:01 INFO - <module>: conv1.bias - torch.Size([64])
15:18:01 INFO - <module>: conv1.weight_orig - torch.Size([64, 15, 4, 4])
15:18:01 INFO - <module>: conv2.bias - torch.Size([128])
15:18:01 INFO - <module>: conv2.weight_orig - torch.Size([128, 64, 4, 4])
15:18:01 INFO - <module>: conv3.bias - torch.Size([256])
15:18:01 INFO - <module>: conv3.weight_orig - torch.Size([256, 128, 4, 4])
15:18:01 INFO - <module>: conv4.bias - torch.Size([512])
15:18:01 INFO - <module>: conv4.weight_orig - torch.Size([512, 256, 4, 4])
15:18:01 INFO - <module>: conv_out.weight - torch.Size([1, 512, 1, 1])
15:18:01 INFO - <module>: conv_out.bias - torch.Size([1])
15:18:01 INFO - <module>: Number of trainable parameters: 184268780
15:18:01 INFO - <module>: Estimated size: 737.07512 MB
15:18:01 INFO - <module>: Starting forward pass with input shape [10, 3, 256, 256]
15:20:34 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
15:20:34 INFO - <module>: Using device cpu
15:20:35 INFO - __init__: GAN mode enabled. Training discriminator for 1 steps.
15:20:35 INFO - <module>: HIFICModel(
  (Encoder): Encoder(
    (net): Sequential(
      (0): Sequential(
        (0): ReflectionPad2d((3, 3, 3, 3))
        (1): Conv2d(3, 60, kernel_size=(7, 7), stride=(1, 1))
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (1): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (2): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (3): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (4): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (5): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (Generator): Generator(
    (first_conv_block): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (residual_block0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (up_sample0): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample1): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample2): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample3): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (last_conv_block): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
  )
  (Discriminator): Discriminator(
    (context_conv): Conv2d(220, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    (context_up_sample): Upsample(scale_factor=16.0, mode=nearest)
    (context_activation): LeakyReLU(negative_slope=0.2)
    (conv1): Conv2d(15, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation1): LeakyReLU(negative_slope=0.2)
    (conv2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation2): LeakyReLU(negative_slope=0.2)
    (conv3): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation3): LeakyReLU(negative_slope=0.2)
    (conv4): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation4): LeakyReLU(negative_slope=0.2)
    (conv_out): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
15:20:35 INFO - <module>: ALL PARAMETERS
15:20:35 INFO - <module>: Encoder.net.0.1.weight - torch.Size([60, 3, 7, 7])
15:20:35 INFO - <module>: Encoder.net.0.1.bias - torch.Size([60])
15:20:35 INFO - <module>: Encoder.net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:20:35 INFO - <module>: Encoder.net.0.2.beta - torch.Size([1, 60, 1, 1])
15:20:35 INFO - <module>: Encoder.net.1.1.weight - torch.Size([120, 60, 3, 3])
15:20:35 INFO - <module>: Encoder.net.1.1.bias - torch.Size([120])
15:20:35 INFO - <module>: Encoder.net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:20:35 INFO - <module>: Encoder.net.1.2.beta - torch.Size([1, 120, 1, 1])
15:20:35 INFO - <module>: Encoder.net.2.1.weight - torch.Size([240, 120, 3, 3])
15:20:35 INFO - <module>: Encoder.net.2.1.bias - torch.Size([240])
15:20:35 INFO - <module>: Encoder.net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:20:35 INFO - <module>: Encoder.net.2.2.beta - torch.Size([1, 240, 1, 1])
15:20:35 INFO - <module>: Encoder.net.3.1.weight - torch.Size([480, 240, 3, 3])
15:20:35 INFO - <module>: Encoder.net.3.1.bias - torch.Size([480])
15:20:35 INFO - <module>: Encoder.net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:20:35 INFO - <module>: Encoder.net.3.2.beta - torch.Size([1, 480, 1, 1])
15:20:35 INFO - <module>: Encoder.net.4.1.weight - torch.Size([960, 480, 3, 3])
15:20:35 INFO - <module>: Encoder.net.4.1.bias - torch.Size([960])
15:20:35 INFO - <module>: Encoder.net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Encoder.net.4.2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Encoder.net.5.1.weight - torch.Size([220, 960, 3, 3])
15:20:35 INFO - <module>: Encoder.net.5.1.bias - torch.Size([220])
15:20:35 INFO - <module>: Generator.first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:20:35 INFO - <module>: Generator.first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:20:35 INFO - <module>: Generator.first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:20:35 INFO - <module>: Generator.first_conv_block.2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block0.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block0.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block1.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block1.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block2.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block2.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block3.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block3.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block4.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block4.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block5.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block5.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block6.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block6.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block7.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block7.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block8.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block8.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:20:35 INFO - <module>: Generator.up_sample0.0.bias - torch.Size([480])
15:20:35 INFO - <module>: Generator.up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:20:35 INFO - <module>: Generator.up_sample1.0.bias - torch.Size([240])
15:20:35 INFO - <module>: Generator.up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:20:35 INFO - <module>: Generator.up_sample2.0.bias - torch.Size([120])
15:20:35 INFO - <module>: Generator.up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:20:35 INFO - <module>: Generator.up_sample3.0.bias - torch.Size([60])
15:20:35 INFO - <module>: Generator.up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:20:35 INFO - <module>: Generator.last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:20:35 INFO - <module>: Generator.last_conv_block.1.bias - torch.Size([3])
15:20:35 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
15:20:35 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
15:20:35 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
15:20:35 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
15:20:35 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
15:20:35 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
15:20:35 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
15:20:35 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
15:20:35 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
15:20:35 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
15:20:35 INFO - <module>: Discriminator.context_conv.weight - torch.Size([12, 220, 3, 3])
15:20:35 INFO - <module>: Discriminator.context_conv.bias - torch.Size([12])
15:20:35 INFO - <module>: Discriminator.conv1.bias - torch.Size([64])
15:20:35 INFO - <module>: Discriminator.conv1.weight_orig - torch.Size([64, 15, 4, 4])
15:20:35 INFO - <module>: Discriminator.conv2.bias - torch.Size([128])
15:20:35 INFO - <module>: Discriminator.conv2.weight_orig - torch.Size([128, 64, 4, 4])
15:20:35 INFO - <module>: Discriminator.conv3.bias - torch.Size([256])
15:20:35 INFO - <module>: Discriminator.conv3.weight_orig - torch.Size([256, 128, 4, 4])
15:20:35 INFO - <module>: Discriminator.conv4.bias - torch.Size([512])
15:20:35 INFO - <module>: Discriminator.conv4.weight_orig - torch.Size([512, 256, 4, 4])
15:20:35 INFO - <module>: Discriminator.conv_out.weight - torch.Size([1, 512, 1, 1])
15:20:35 INFO - <module>: Discriminator.conv_out.bias - torch.Size([1])
15:20:35 INFO - <module>: AMORTIZATION PARAMETERS
15:20:35 INFO - <module>: net.0.1.weight - torch.Size([60, 3, 7, 7])
15:20:35 INFO - <module>: net.0.1.bias - torch.Size([60])
15:20:35 INFO - <module>: net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:20:35 INFO - <module>: net.0.2.beta - torch.Size([1, 60, 1, 1])
15:20:35 INFO - <module>: net.1.1.weight - torch.Size([120, 60, 3, 3])
15:20:35 INFO - <module>: net.1.1.bias - torch.Size([120])
15:20:35 INFO - <module>: net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:20:35 INFO - <module>: net.1.2.beta - torch.Size([1, 120, 1, 1])
15:20:35 INFO - <module>: net.2.1.weight - torch.Size([240, 120, 3, 3])
15:20:35 INFO - <module>: net.2.1.bias - torch.Size([240])
15:20:35 INFO - <module>: net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:20:35 INFO - <module>: net.2.2.beta - torch.Size([1, 240, 1, 1])
15:20:35 INFO - <module>: net.3.1.weight - torch.Size([480, 240, 3, 3])
15:20:35 INFO - <module>: net.3.1.bias - torch.Size([480])
15:20:35 INFO - <module>: net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:20:35 INFO - <module>: net.3.2.beta - torch.Size([1, 480, 1, 1])
15:20:35 INFO - <module>: net.4.1.weight - torch.Size([960, 480, 3, 3])
15:20:35 INFO - <module>: net.4.1.bias - torch.Size([960])
15:20:35 INFO - <module>: net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: net.4.2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: net.5.1.weight - torch.Size([220, 960, 3, 3])
15:20:35 INFO - <module>: net.5.1.bias - torch.Size([220])
15:20:35 INFO - <module>: first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:20:35 INFO - <module>: first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:20:35 INFO - <module>: first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:20:35 INFO - <module>: first_conv_block.2.bias - torch.Size([960])
15:20:35 INFO - <module>: first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block0.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block0.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block1.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block1.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block2.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block2.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block3.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block3.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block4.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block4.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block5.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block5.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block6.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block6.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block7.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block7.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block8.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: residual_block8.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:20:35 INFO - <module>: up_sample0.0.bias - torch.Size([480])
15:20:35 INFO - <module>: up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:20:35 INFO - <module>: up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:20:35 INFO - <module>: up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:20:35 INFO - <module>: up_sample1.0.bias - torch.Size([240])
15:20:35 INFO - <module>: up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:20:35 INFO - <module>: up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:20:35 INFO - <module>: up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:20:35 INFO - <module>: up_sample2.0.bias - torch.Size([120])
15:20:35 INFO - <module>: up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:20:35 INFO - <module>: up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:20:35 INFO - <module>: up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:20:35 INFO - <module>: up_sample3.0.bias - torch.Size([60])
15:20:35 INFO - <module>: up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:20:35 INFO - <module>: up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:20:35 INFO - <module>: last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:20:35 INFO - <module>: last_conv_block.1.bias - torch.Size([3])
15:20:35 INFO - <module>: conv1.weight - torch.Size([320, 220, 3, 3])
15:20:35 INFO - <module>: conv1.bias - torch.Size([320])
15:20:35 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: conv2.bias - torch.Size([320])
15:20:35 INFO - <module>: conv3.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: conv3.bias - torch.Size([320])
15:20:35 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: conv1.bias - torch.Size([320])
15:20:35 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: conv2.bias - torch.Size([320])
15:20:35 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
15:20:35 INFO - <module>: conv3.bias - torch.Size([220])
15:20:35 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: conv1.bias - torch.Size([320])
15:20:35 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: conv2.bias - torch.Size([320])
15:20:35 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
15:20:35 INFO - <module>: conv3.bias - torch.Size([220])
15:20:35 INFO - <module>: AMORTIZATION PARAMETERS
15:20:35 INFO - <module>: Encoder.net.0.1.weight - torch.Size([60, 3, 7, 7])
15:20:35 INFO - <module>: Encoder.net.0.1.bias - torch.Size([60])
15:20:35 INFO - <module>: Encoder.net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:20:35 INFO - <module>: Encoder.net.0.2.beta - torch.Size([1, 60, 1, 1])
15:20:35 INFO - <module>: Encoder.net.1.1.weight - torch.Size([120, 60, 3, 3])
15:20:35 INFO - <module>: Encoder.net.1.1.bias - torch.Size([120])
15:20:35 INFO - <module>: Encoder.net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:20:35 INFO - <module>: Encoder.net.1.2.beta - torch.Size([1, 120, 1, 1])
15:20:35 INFO - <module>: Encoder.net.2.1.weight - torch.Size([240, 120, 3, 3])
15:20:35 INFO - <module>: Encoder.net.2.1.bias - torch.Size([240])
15:20:35 INFO - <module>: Encoder.net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:20:35 INFO - <module>: Encoder.net.2.2.beta - torch.Size([1, 240, 1, 1])
15:20:35 INFO - <module>: Encoder.net.3.1.weight - torch.Size([480, 240, 3, 3])
15:20:35 INFO - <module>: Encoder.net.3.1.bias - torch.Size([480])
15:20:35 INFO - <module>: Encoder.net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:20:35 INFO - <module>: Encoder.net.3.2.beta - torch.Size([1, 480, 1, 1])
15:20:35 INFO - <module>: Encoder.net.4.1.weight - torch.Size([960, 480, 3, 3])
15:20:35 INFO - <module>: Encoder.net.4.1.bias - torch.Size([960])
15:20:35 INFO - <module>: Encoder.net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Encoder.net.4.2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Encoder.net.5.1.weight - torch.Size([220, 960, 3, 3])
15:20:35 INFO - <module>: Encoder.net.5.1.bias - torch.Size([220])
15:20:35 INFO - <module>: Generator.first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:20:35 INFO - <module>: Generator.first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:20:35 INFO - <module>: Generator.first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:20:35 INFO - <module>: Generator.first_conv_block.2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block0.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block0.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block1.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block1.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block2.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block2.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block3.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block3.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block4.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block4.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block5.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block5.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block6.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block6.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block7.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block7.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block8.conv1.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:20:35 INFO - <module>: Generator.residual_block8.conv2.bias - torch.Size([960])
15:20:35 INFO - <module>: Generator.residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:20:35 INFO - <module>: Generator.up_sample0.0.bias - torch.Size([480])
15:20:35 INFO - <module>: Generator.up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:20:35 INFO - <module>: Generator.up_sample1.0.bias - torch.Size([240])
15:20:35 INFO - <module>: Generator.up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:20:35 INFO - <module>: Generator.up_sample2.0.bias - torch.Size([120])
15:20:35 INFO - <module>: Generator.up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:20:35 INFO - <module>: Generator.up_sample3.0.bias - torch.Size([60])
15:20:35 INFO - <module>: Generator.up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:20:35 INFO - <module>: Generator.up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:20:35 INFO - <module>: Generator.last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:20:35 INFO - <module>: Generator.last_conv_block.1.bias - torch.Size([3])
15:20:35 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
15:20:35 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
15:20:35 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
15:20:35 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
15:20:35 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
15:20:35 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
15:20:35 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
15:20:35 INFO - <module>: HYPERPRIOR PARAMETERS
15:20:35 INFO - <module>: H_0 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: a_0 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: b_0 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: H_1 - torch.Size([320, 3, 3])
15:20:35 INFO - <module>: a_1 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: b_1 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: H_2 - torch.Size([320, 3, 3])
15:20:35 INFO - <module>: a_2 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: b_2 - torch.Size([320, 3, 1])
15:20:35 INFO - <module>: H_3 - torch.Size([320, 1, 3])
15:20:35 INFO - <module>: a_3 - torch.Size([320, 1, 1])
15:20:35 INFO - <module>: b_3 - torch.Size([320, 1, 1])
15:20:35 INFO - <module>: DISCRIMINATOR PARAMETERS
15:20:35 INFO - <module>: context_conv.weight - torch.Size([12, 220, 3, 3])
15:20:35 INFO - <module>: context_conv.bias - torch.Size([12])
15:20:35 INFO - <module>: conv1.bias - torch.Size([64])
15:20:35 INFO - <module>: conv1.weight_orig - torch.Size([64, 15, 4, 4])
15:20:35 INFO - <module>: conv2.bias - torch.Size([128])
15:20:35 INFO - <module>: conv2.weight_orig - torch.Size([128, 64, 4, 4])
15:20:35 INFO - <module>: conv3.bias - torch.Size([256])
15:20:35 INFO - <module>: conv3.weight_orig - torch.Size([256, 128, 4, 4])
15:20:35 INFO - <module>: conv4.bias - torch.Size([512])
15:20:35 INFO - <module>: conv4.weight_orig - torch.Size([512, 256, 4, 4])
15:20:35 INFO - <module>: conv_out.weight - torch.Size([1, 512, 1, 1])
15:20:35 INFO - <module>: conv_out.bias - torch.Size([1])
15:20:35 INFO - <module>: Number of trainable parameters: 184268780
15:20:35 INFO - <module>: Estimated size: 737.07512 MB
15:20:35 INFO - <module>: Starting forward pass with input shape [10, 3, 256, 256]
15:21:16 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
15:21:16 INFO - <module>: Using device cpu
15:21:17 INFO - __init__: GAN mode enabled. Training discriminator for 1 steps.
15:21:18 INFO - <module>: HIFICModel(
  (Encoder): Encoder(
    (net): Sequential(
      (0): Sequential(
        (0): ReflectionPad2d((3, 3, 3, 3))
        (1): Conv2d(3, 60, kernel_size=(7, 7), stride=(1, 1))
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (1): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (2): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (3): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (4): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (5): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (Generator): Generator(
    (first_conv_block): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (residual_block0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (up_sample0): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample1): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample2): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample3): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (last_conv_block): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
  )
  (Discriminator): Discriminator(
    (context_conv): Conv2d(220, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    (context_up_sample): Upsample(scale_factor=16.0, mode=nearest)
    (context_activation): LeakyReLU(negative_slope=0.2)
    (conv1): Conv2d(15, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation1): LeakyReLU(negative_slope=0.2)
    (conv2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation2): LeakyReLU(negative_slope=0.2)
    (conv3): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation3): LeakyReLU(negative_slope=0.2)
    (conv4): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation4): LeakyReLU(negative_slope=0.2)
    (conv_out): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
15:21:18 INFO - <module>: ALL PARAMETERS
15:21:18 INFO - <module>: Encoder.net.0.1.weight - torch.Size([60, 3, 7, 7])
15:21:18 INFO - <module>: Encoder.net.0.1.bias - torch.Size([60])
15:21:18 INFO - <module>: Encoder.net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:21:18 INFO - <module>: Encoder.net.0.2.beta - torch.Size([1, 60, 1, 1])
15:21:18 INFO - <module>: Encoder.net.1.1.weight - torch.Size([120, 60, 3, 3])
15:21:18 INFO - <module>: Encoder.net.1.1.bias - torch.Size([120])
15:21:18 INFO - <module>: Encoder.net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:21:18 INFO - <module>: Encoder.net.1.2.beta - torch.Size([1, 120, 1, 1])
15:21:18 INFO - <module>: Encoder.net.2.1.weight - torch.Size([240, 120, 3, 3])
15:21:18 INFO - <module>: Encoder.net.2.1.bias - torch.Size([240])
15:21:18 INFO - <module>: Encoder.net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:21:18 INFO - <module>: Encoder.net.2.2.beta - torch.Size([1, 240, 1, 1])
15:21:18 INFO - <module>: Encoder.net.3.1.weight - torch.Size([480, 240, 3, 3])
15:21:18 INFO - <module>: Encoder.net.3.1.bias - torch.Size([480])
15:21:18 INFO - <module>: Encoder.net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:21:18 INFO - <module>: Encoder.net.3.2.beta - torch.Size([1, 480, 1, 1])
15:21:18 INFO - <module>: Encoder.net.4.1.weight - torch.Size([960, 480, 3, 3])
15:21:18 INFO - <module>: Encoder.net.4.1.bias - torch.Size([960])
15:21:18 INFO - <module>: Encoder.net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Encoder.net.4.2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Encoder.net.5.1.weight - torch.Size([220, 960, 3, 3])
15:21:18 INFO - <module>: Encoder.net.5.1.bias - torch.Size([220])
15:21:18 INFO - <module>: Generator.first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:21:18 INFO - <module>: Generator.first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:21:18 INFO - <module>: Generator.first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:21:18 INFO - <module>: Generator.first_conv_block.2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block0.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block0.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block1.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block1.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block2.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block2.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block3.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block3.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block4.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block4.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block5.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block5.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block6.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block6.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block7.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block7.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block8.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block8.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:21:18 INFO - <module>: Generator.up_sample0.0.bias - torch.Size([480])
15:21:18 INFO - <module>: Generator.up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:21:18 INFO - <module>: Generator.up_sample1.0.bias - torch.Size([240])
15:21:18 INFO - <module>: Generator.up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:21:18 INFO - <module>: Generator.up_sample2.0.bias - torch.Size([120])
15:21:18 INFO - <module>: Generator.up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:21:18 INFO - <module>: Generator.up_sample3.0.bias - torch.Size([60])
15:21:18 INFO - <module>: Generator.up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:21:18 INFO - <module>: Generator.last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:21:18 INFO - <module>: Generator.last_conv_block.1.bias - torch.Size([3])
15:21:18 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
15:21:18 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
15:21:18 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
15:21:18 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
15:21:18 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
15:21:18 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
15:21:18 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
15:21:18 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
15:21:18 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
15:21:18 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
15:21:18 INFO - <module>: Discriminator.context_conv.weight - torch.Size([12, 220, 3, 3])
15:21:18 INFO - <module>: Discriminator.context_conv.bias - torch.Size([12])
15:21:18 INFO - <module>: Discriminator.conv1.bias - torch.Size([64])
15:21:18 INFO - <module>: Discriminator.conv1.weight_orig - torch.Size([64, 15, 4, 4])
15:21:18 INFO - <module>: Discriminator.conv2.bias - torch.Size([128])
15:21:18 INFO - <module>: Discriminator.conv2.weight_orig - torch.Size([128, 64, 4, 4])
15:21:18 INFO - <module>: Discriminator.conv3.bias - torch.Size([256])
15:21:18 INFO - <module>: Discriminator.conv3.weight_orig - torch.Size([256, 128, 4, 4])
15:21:18 INFO - <module>: Discriminator.conv4.bias - torch.Size([512])
15:21:18 INFO - <module>: Discriminator.conv4.weight_orig - torch.Size([512, 256, 4, 4])
15:21:18 INFO - <module>: Discriminator.conv_out.weight - torch.Size([1, 512, 1, 1])
15:21:18 INFO - <module>: Discriminator.conv_out.bias - torch.Size([1])
15:21:18 INFO - <module>: AMORTIZATION PARAMETERS
15:21:18 INFO - <module>: net.0.1.weight - torch.Size([60, 3, 7, 7])
15:21:18 INFO - <module>: net.0.1.bias - torch.Size([60])
15:21:18 INFO - <module>: net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:21:18 INFO - <module>: net.0.2.beta - torch.Size([1, 60, 1, 1])
15:21:18 INFO - <module>: net.1.1.weight - torch.Size([120, 60, 3, 3])
15:21:18 INFO - <module>: net.1.1.bias - torch.Size([120])
15:21:18 INFO - <module>: net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:21:18 INFO - <module>: net.1.2.beta - torch.Size([1, 120, 1, 1])
15:21:18 INFO - <module>: net.2.1.weight - torch.Size([240, 120, 3, 3])
15:21:18 INFO - <module>: net.2.1.bias - torch.Size([240])
15:21:18 INFO - <module>: net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:21:18 INFO - <module>: net.2.2.beta - torch.Size([1, 240, 1, 1])
15:21:18 INFO - <module>: net.3.1.weight - torch.Size([480, 240, 3, 3])
15:21:18 INFO - <module>: net.3.1.bias - torch.Size([480])
15:21:18 INFO - <module>: net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:21:18 INFO - <module>: net.3.2.beta - torch.Size([1, 480, 1, 1])
15:21:18 INFO - <module>: net.4.1.weight - torch.Size([960, 480, 3, 3])
15:21:18 INFO - <module>: net.4.1.bias - torch.Size([960])
15:21:18 INFO - <module>: net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: net.4.2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: net.5.1.weight - torch.Size([220, 960, 3, 3])
15:21:18 INFO - <module>: net.5.1.bias - torch.Size([220])
15:21:18 INFO - <module>: first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:21:18 INFO - <module>: first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:21:18 INFO - <module>: first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:21:18 INFO - <module>: first_conv_block.2.bias - torch.Size([960])
15:21:18 INFO - <module>: first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block0.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block0.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block1.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block1.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block2.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block2.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block3.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block3.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block4.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block4.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block5.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block5.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block6.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block6.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block7.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block7.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block8.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: residual_block8.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:21:18 INFO - <module>: up_sample0.0.bias - torch.Size([480])
15:21:18 INFO - <module>: up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:21:18 INFO - <module>: up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:21:18 INFO - <module>: up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:21:18 INFO - <module>: up_sample1.0.bias - torch.Size([240])
15:21:18 INFO - <module>: up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:21:18 INFO - <module>: up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:21:18 INFO - <module>: up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:21:18 INFO - <module>: up_sample2.0.bias - torch.Size([120])
15:21:18 INFO - <module>: up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:21:18 INFO - <module>: up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:21:18 INFO - <module>: up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:21:18 INFO - <module>: up_sample3.0.bias - torch.Size([60])
15:21:18 INFO - <module>: up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:21:18 INFO - <module>: up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:21:18 INFO - <module>: last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:21:18 INFO - <module>: last_conv_block.1.bias - torch.Size([3])
15:21:18 INFO - <module>: conv1.weight - torch.Size([320, 220, 3, 3])
15:21:18 INFO - <module>: conv1.bias - torch.Size([320])
15:21:18 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: conv2.bias - torch.Size([320])
15:21:18 INFO - <module>: conv3.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: conv3.bias - torch.Size([320])
15:21:18 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: conv1.bias - torch.Size([320])
15:21:18 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: conv2.bias - torch.Size([320])
15:21:18 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
15:21:18 INFO - <module>: conv3.bias - torch.Size([220])
15:21:18 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: conv1.bias - torch.Size([320])
15:21:18 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: conv2.bias - torch.Size([320])
15:21:18 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
15:21:18 INFO - <module>: conv3.bias - torch.Size([220])
15:21:18 INFO - <module>: AMORTIZATION PARAMETERS
15:21:18 INFO - <module>: Encoder.net.0.1.weight - torch.Size([60, 3, 7, 7])
15:21:18 INFO - <module>: Encoder.net.0.1.bias - torch.Size([60])
15:21:18 INFO - <module>: Encoder.net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:21:18 INFO - <module>: Encoder.net.0.2.beta - torch.Size([1, 60, 1, 1])
15:21:18 INFO - <module>: Encoder.net.1.1.weight - torch.Size([120, 60, 3, 3])
15:21:18 INFO - <module>: Encoder.net.1.1.bias - torch.Size([120])
15:21:18 INFO - <module>: Encoder.net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:21:18 INFO - <module>: Encoder.net.1.2.beta - torch.Size([1, 120, 1, 1])
15:21:18 INFO - <module>: Encoder.net.2.1.weight - torch.Size([240, 120, 3, 3])
15:21:18 INFO - <module>: Encoder.net.2.1.bias - torch.Size([240])
15:21:18 INFO - <module>: Encoder.net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:21:18 INFO - <module>: Encoder.net.2.2.beta - torch.Size([1, 240, 1, 1])
15:21:18 INFO - <module>: Encoder.net.3.1.weight - torch.Size([480, 240, 3, 3])
15:21:18 INFO - <module>: Encoder.net.3.1.bias - torch.Size([480])
15:21:18 INFO - <module>: Encoder.net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:21:18 INFO - <module>: Encoder.net.3.2.beta - torch.Size([1, 480, 1, 1])
15:21:18 INFO - <module>: Encoder.net.4.1.weight - torch.Size([960, 480, 3, 3])
15:21:18 INFO - <module>: Encoder.net.4.1.bias - torch.Size([960])
15:21:18 INFO - <module>: Encoder.net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Encoder.net.4.2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Encoder.net.5.1.weight - torch.Size([220, 960, 3, 3])
15:21:18 INFO - <module>: Encoder.net.5.1.bias - torch.Size([220])
15:21:18 INFO - <module>: Generator.first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:21:18 INFO - <module>: Generator.first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:21:18 INFO - <module>: Generator.first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:21:18 INFO - <module>: Generator.first_conv_block.2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block0.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block0.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block1.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block1.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block2.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block2.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block3.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block3.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block4.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block4.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block5.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block5.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block6.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block6.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block7.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block7.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block8.conv1.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:21:18 INFO - <module>: Generator.residual_block8.conv2.bias - torch.Size([960])
15:21:18 INFO - <module>: Generator.residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:21:18 INFO - <module>: Generator.up_sample0.0.bias - torch.Size([480])
15:21:18 INFO - <module>: Generator.up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:21:18 INFO - <module>: Generator.up_sample1.0.bias - torch.Size([240])
15:21:18 INFO - <module>: Generator.up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:21:18 INFO - <module>: Generator.up_sample2.0.bias - torch.Size([120])
15:21:18 INFO - <module>: Generator.up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:21:18 INFO - <module>: Generator.up_sample3.0.bias - torch.Size([60])
15:21:18 INFO - <module>: Generator.up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:21:18 INFO - <module>: Generator.up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:21:18 INFO - <module>: Generator.last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:21:18 INFO - <module>: Generator.last_conv_block.1.bias - torch.Size([3])
15:21:18 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
15:21:18 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
15:21:18 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
15:21:18 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
15:21:18 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
15:21:18 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
15:21:18 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
15:21:18 INFO - <module>: HYPERPRIOR PARAMETERS
15:21:18 INFO - <module>: H_0 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: a_0 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: b_0 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: H_1 - torch.Size([320, 3, 3])
15:21:18 INFO - <module>: a_1 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: b_1 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: H_2 - torch.Size([320, 3, 3])
15:21:18 INFO - <module>: a_2 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: b_2 - torch.Size([320, 3, 1])
15:21:18 INFO - <module>: H_3 - torch.Size([320, 1, 3])
15:21:18 INFO - <module>: a_3 - torch.Size([320, 1, 1])
15:21:18 INFO - <module>: b_3 - torch.Size([320, 1, 1])
15:21:18 INFO - <module>: DISCRIMINATOR PARAMETERS
15:21:18 INFO - <module>: context_conv.weight - torch.Size([12, 220, 3, 3])
15:21:18 INFO - <module>: context_conv.bias - torch.Size([12])
15:21:18 INFO - <module>: conv1.bias - torch.Size([64])
15:21:18 INFO - <module>: conv1.weight_orig - torch.Size([64, 15, 4, 4])
15:21:18 INFO - <module>: conv2.bias - torch.Size([128])
15:21:18 INFO - <module>: conv2.weight_orig - torch.Size([128, 64, 4, 4])
15:21:18 INFO - <module>: conv3.bias - torch.Size([256])
15:21:18 INFO - <module>: conv3.weight_orig - torch.Size([256, 128, 4, 4])
15:21:18 INFO - <module>: conv4.bias - torch.Size([512])
15:21:18 INFO - <module>: conv4.weight_orig - torch.Size([512, 256, 4, 4])
15:21:18 INFO - <module>: conv_out.weight - torch.Size([1, 512, 1, 1])
15:21:18 INFO - <module>: conv_out.bias - torch.Size([1])
15:21:18 INFO - <module>: Number of trainable parameters: 184268780
15:21:18 INFO - <module>: Estimated size: 737.07512 MB
15:21:18 INFO - <module>: Starting forward pass with input shape [10, 3, 256, 256]
15:23:41 INFO - logger_setup: /home/pducanh/Desktop/High-Fidelity-Generative-Image-Compression/src
15:23:41 INFO - <module>: Using device cpu
15:23:41 INFO - __init__: GAN mode enabled. Training discriminator for 1 steps.
15:23:42 INFO - <module>: HIFICModel(
  (Encoder): Encoder(
    (net): Sequential(
      (0): Sequential(
        (0): ReflectionPad2d((3, 3, 3, 3))
        (1): Conv2d(3, 60, kernel_size=(7, 7), stride=(1, 1))
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (1): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (2): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (3): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (4): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
        (2): ChannelNorm2D()
        (3): ReLU()
      )
      (5): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (Generator): Generator(
    (first_conv_block): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (residual_block0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (residual_block8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm2): ChannelNorm2D()
    )
    (up_sample0): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample1): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample2): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (up_sample3): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (last_conv_block): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
  )
  (Discriminator): Discriminator(
    (context_conv): Conv2d(220, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    (context_up_sample): Upsample(scale_factor=16.0, mode=nearest)
    (context_activation): LeakyReLU(negative_slope=0.2)
    (conv1): Conv2d(15, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation1): LeakyReLU(negative_slope=0.2)
    (conv2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation2): LeakyReLU(negative_slope=0.2)
    (conv3): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation3): LeakyReLU(negative_slope=0.2)
    (conv4): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
    (activation4): LeakyReLU(negative_slope=0.2)
    (conv_out): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
15:23:42 INFO - <module>: ALL PARAMETERS
15:23:42 INFO - <module>: Encoder.net.0.1.weight - torch.Size([60, 3, 7, 7])
15:23:42 INFO - <module>: Encoder.net.0.1.bias - torch.Size([60])
15:23:42 INFO - <module>: Encoder.net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:23:42 INFO - <module>: Encoder.net.0.2.beta - torch.Size([1, 60, 1, 1])
15:23:42 INFO - <module>: Encoder.net.1.1.weight - torch.Size([120, 60, 3, 3])
15:23:42 INFO - <module>: Encoder.net.1.1.bias - torch.Size([120])
15:23:42 INFO - <module>: Encoder.net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:23:42 INFO - <module>: Encoder.net.1.2.beta - torch.Size([1, 120, 1, 1])
15:23:42 INFO - <module>: Encoder.net.2.1.weight - torch.Size([240, 120, 3, 3])
15:23:42 INFO - <module>: Encoder.net.2.1.bias - torch.Size([240])
15:23:42 INFO - <module>: Encoder.net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:23:42 INFO - <module>: Encoder.net.2.2.beta - torch.Size([1, 240, 1, 1])
15:23:42 INFO - <module>: Encoder.net.3.1.weight - torch.Size([480, 240, 3, 3])
15:23:42 INFO - <module>: Encoder.net.3.1.bias - torch.Size([480])
15:23:42 INFO - <module>: Encoder.net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:23:42 INFO - <module>: Encoder.net.3.2.beta - torch.Size([1, 480, 1, 1])
15:23:42 INFO - <module>: Encoder.net.4.1.weight - torch.Size([960, 480, 3, 3])
15:23:42 INFO - <module>: Encoder.net.4.1.bias - torch.Size([960])
15:23:42 INFO - <module>: Encoder.net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Encoder.net.4.2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Encoder.net.5.1.weight - torch.Size([220, 960, 3, 3])
15:23:42 INFO - <module>: Encoder.net.5.1.bias - torch.Size([220])
15:23:42 INFO - <module>: Generator.first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:23:42 INFO - <module>: Generator.first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:23:42 INFO - <module>: Generator.first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:23:42 INFO - <module>: Generator.first_conv_block.2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block0.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block0.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block1.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block1.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block2.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block2.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block3.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block3.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block4.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block4.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block5.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block5.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block6.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block6.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block7.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block7.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block8.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block8.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:23:42 INFO - <module>: Generator.up_sample0.0.bias - torch.Size([480])
15:23:42 INFO - <module>: Generator.up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:23:42 INFO - <module>: Generator.up_sample1.0.bias - torch.Size([240])
15:23:42 INFO - <module>: Generator.up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:23:42 INFO - <module>: Generator.up_sample2.0.bias - torch.Size([120])
15:23:42 INFO - <module>: Generator.up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:23:42 INFO - <module>: Generator.up_sample3.0.bias - torch.Size([60])
15:23:42 INFO - <module>: Generator.up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:23:42 INFO - <module>: Generator.last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:23:42 INFO - <module>: Generator.last_conv_block.1.bias - torch.Size([3])
15:23:42 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
15:23:42 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
15:23:42 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
15:23:42 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
15:23:42 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
15:23:42 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
15:23:42 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
15:23:42 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
15:23:42 INFO - <module>: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
15:23:42 INFO - <module>: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
15:23:42 INFO - <module>: Discriminator.context_conv.weight - torch.Size([12, 220, 3, 3])
15:23:42 INFO - <module>: Discriminator.context_conv.bias - torch.Size([12])
15:23:42 INFO - <module>: Discriminator.conv1.bias - torch.Size([64])
15:23:42 INFO - <module>: Discriminator.conv1.weight_orig - torch.Size([64, 15, 4, 4])
15:23:42 INFO - <module>: Discriminator.conv2.bias - torch.Size([128])
15:23:42 INFO - <module>: Discriminator.conv2.weight_orig - torch.Size([128, 64, 4, 4])
15:23:42 INFO - <module>: Discriminator.conv3.bias - torch.Size([256])
15:23:42 INFO - <module>: Discriminator.conv3.weight_orig - torch.Size([256, 128, 4, 4])
15:23:42 INFO - <module>: Discriminator.conv4.bias - torch.Size([512])
15:23:42 INFO - <module>: Discriminator.conv4.weight_orig - torch.Size([512, 256, 4, 4])
15:23:42 INFO - <module>: Discriminator.conv_out.weight - torch.Size([1, 512, 1, 1])
15:23:42 INFO - <module>: Discriminator.conv_out.bias - torch.Size([1])
15:23:42 INFO - <module>: AMORTIZATION PARAMETERS
15:23:42 INFO - <module>: net.0.1.weight - torch.Size([60, 3, 7, 7])
15:23:42 INFO - <module>: net.0.1.bias - torch.Size([60])
15:23:42 INFO - <module>: net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:23:42 INFO - <module>: net.0.2.beta - torch.Size([1, 60, 1, 1])
15:23:42 INFO - <module>: net.1.1.weight - torch.Size([120, 60, 3, 3])
15:23:42 INFO - <module>: net.1.1.bias - torch.Size([120])
15:23:42 INFO - <module>: net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:23:42 INFO - <module>: net.1.2.beta - torch.Size([1, 120, 1, 1])
15:23:42 INFO - <module>: net.2.1.weight - torch.Size([240, 120, 3, 3])
15:23:42 INFO - <module>: net.2.1.bias - torch.Size([240])
15:23:42 INFO - <module>: net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:23:42 INFO - <module>: net.2.2.beta - torch.Size([1, 240, 1, 1])
15:23:42 INFO - <module>: net.3.1.weight - torch.Size([480, 240, 3, 3])
15:23:42 INFO - <module>: net.3.1.bias - torch.Size([480])
15:23:42 INFO - <module>: net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:23:42 INFO - <module>: net.3.2.beta - torch.Size([1, 480, 1, 1])
15:23:42 INFO - <module>: net.4.1.weight - torch.Size([960, 480, 3, 3])
15:23:42 INFO - <module>: net.4.1.bias - torch.Size([960])
15:23:42 INFO - <module>: net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: net.4.2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: net.5.1.weight - torch.Size([220, 960, 3, 3])
15:23:42 INFO - <module>: net.5.1.bias - torch.Size([220])
15:23:42 INFO - <module>: first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:23:42 INFO - <module>: first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:23:42 INFO - <module>: first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:23:42 INFO - <module>: first_conv_block.2.bias - torch.Size([960])
15:23:42 INFO - <module>: first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block0.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block0.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block1.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block1.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block2.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block2.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block3.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block3.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block4.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block4.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block5.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block5.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block6.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block6.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block7.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block7.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block8.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: residual_block8.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:23:42 INFO - <module>: up_sample0.0.bias - torch.Size([480])
15:23:42 INFO - <module>: up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:23:42 INFO - <module>: up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:23:42 INFO - <module>: up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:23:42 INFO - <module>: up_sample1.0.bias - torch.Size([240])
15:23:42 INFO - <module>: up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:23:42 INFO - <module>: up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:23:42 INFO - <module>: up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:23:42 INFO - <module>: up_sample2.0.bias - torch.Size([120])
15:23:42 INFO - <module>: up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:23:42 INFO - <module>: up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:23:42 INFO - <module>: up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:23:42 INFO - <module>: up_sample3.0.bias - torch.Size([60])
15:23:42 INFO - <module>: up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:23:42 INFO - <module>: up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:23:42 INFO - <module>: last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:23:42 INFO - <module>: last_conv_block.1.bias - torch.Size([3])
15:23:42 INFO - <module>: conv1.weight - torch.Size([320, 220, 3, 3])
15:23:42 INFO - <module>: conv1.bias - torch.Size([320])
15:23:42 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: conv2.bias - torch.Size([320])
15:23:42 INFO - <module>: conv3.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: conv3.bias - torch.Size([320])
15:23:42 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: conv1.bias - torch.Size([320])
15:23:42 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: conv2.bias - torch.Size([320])
15:23:42 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
15:23:42 INFO - <module>: conv3.bias - torch.Size([220])
15:23:42 INFO - <module>: conv1.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: conv1.bias - torch.Size([320])
15:23:42 INFO - <module>: conv2.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: conv2.bias - torch.Size([320])
15:23:42 INFO - <module>: conv3.weight - torch.Size([320, 220, 3, 3])
15:23:42 INFO - <module>: conv3.bias - torch.Size([220])
15:23:42 INFO - <module>: AMORTIZATION PARAMETERS
15:23:42 INFO - <module>: Encoder.net.0.1.weight - torch.Size([60, 3, 7, 7])
15:23:42 INFO - <module>: Encoder.net.0.1.bias - torch.Size([60])
15:23:42 INFO - <module>: Encoder.net.0.2.gamma - torch.Size([1, 60, 1, 1])
15:23:42 INFO - <module>: Encoder.net.0.2.beta - torch.Size([1, 60, 1, 1])
15:23:42 INFO - <module>: Encoder.net.1.1.weight - torch.Size([120, 60, 3, 3])
15:23:42 INFO - <module>: Encoder.net.1.1.bias - torch.Size([120])
15:23:42 INFO - <module>: Encoder.net.1.2.gamma - torch.Size([1, 120, 1, 1])
15:23:42 INFO - <module>: Encoder.net.1.2.beta - torch.Size([1, 120, 1, 1])
15:23:42 INFO - <module>: Encoder.net.2.1.weight - torch.Size([240, 120, 3, 3])
15:23:42 INFO - <module>: Encoder.net.2.1.bias - torch.Size([240])
15:23:42 INFO - <module>: Encoder.net.2.2.gamma - torch.Size([1, 240, 1, 1])
15:23:42 INFO - <module>: Encoder.net.2.2.beta - torch.Size([1, 240, 1, 1])
15:23:42 INFO - <module>: Encoder.net.3.1.weight - torch.Size([480, 240, 3, 3])
15:23:42 INFO - <module>: Encoder.net.3.1.bias - torch.Size([480])
15:23:42 INFO - <module>: Encoder.net.3.2.gamma - torch.Size([1, 480, 1, 1])
15:23:42 INFO - <module>: Encoder.net.3.2.beta - torch.Size([1, 480, 1, 1])
15:23:42 INFO - <module>: Encoder.net.4.1.weight - torch.Size([960, 480, 3, 3])
15:23:42 INFO - <module>: Encoder.net.4.1.bias - torch.Size([960])
15:23:42 INFO - <module>: Encoder.net.4.2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Encoder.net.4.2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Encoder.net.5.1.weight - torch.Size([220, 960, 3, 3])
15:23:42 INFO - <module>: Encoder.net.5.1.bias - torch.Size([220])
15:23:42 INFO - <module>: Generator.first_conv_block.0.gamma - torch.Size([1, 220, 1, 1])
15:23:42 INFO - <module>: Generator.first_conv_block.0.beta - torch.Size([1, 220, 1, 1])
15:23:42 INFO - <module>: Generator.first_conv_block.2.weight - torch.Size([960, 220, 3, 3])
15:23:42 INFO - <module>: Generator.first_conv_block.2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.first_conv_block.3.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.first_conv_block.3.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block0.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block0.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block0.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block0.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block0.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block0.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block0.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block0.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block1.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block1.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block1.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block1.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block1.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block1.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block1.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block1.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block2.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block2.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block2.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block2.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block2.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block2.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block2.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block2.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block3.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block3.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block3.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block3.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block3.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block3.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block3.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block3.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block4.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block4.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block4.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block4.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block4.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block4.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block4.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block4.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block5.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block5.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block5.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block5.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block5.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block5.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block5.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block5.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block6.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block6.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block6.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block6.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block6.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block6.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block6.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block6.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block7.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block7.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block7.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block7.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block7.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block7.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block7.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block7.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block8.conv1.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block8.conv1.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block8.norm1.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block8.norm1.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block8.conv2.weight - torch.Size([960, 960, 3, 3])
15:23:42 INFO - <module>: Generator.residual_block8.conv2.bias - torch.Size([960])
15:23:42 INFO - <module>: Generator.residual_block8.norm2.gamma - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.residual_block8.norm2.beta - torch.Size([1, 960, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample0.0.weight - torch.Size([960, 480, 3, 3])
15:23:42 INFO - <module>: Generator.up_sample0.0.bias - torch.Size([480])
15:23:42 INFO - <module>: Generator.up_sample0.1.gamma - torch.Size([1, 480, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample0.1.beta - torch.Size([1, 480, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample1.0.weight - torch.Size([480, 240, 3, 3])
15:23:42 INFO - <module>: Generator.up_sample1.0.bias - torch.Size([240])
15:23:42 INFO - <module>: Generator.up_sample1.1.gamma - torch.Size([1, 240, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample1.1.beta - torch.Size([1, 240, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample2.0.weight - torch.Size([240, 120, 3, 3])
15:23:42 INFO - <module>: Generator.up_sample2.0.bias - torch.Size([120])
15:23:42 INFO - <module>: Generator.up_sample2.1.gamma - torch.Size([1, 120, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample2.1.beta - torch.Size([1, 120, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample3.0.weight - torch.Size([120, 60, 3, 3])
15:23:42 INFO - <module>: Generator.up_sample3.0.bias - torch.Size([60])
15:23:42 INFO - <module>: Generator.up_sample3.1.gamma - torch.Size([1, 60, 1, 1])
15:23:42 INFO - <module>: Generator.up_sample3.1.beta - torch.Size([1, 60, 1, 1])
15:23:42 INFO - <module>: Generator.last_conv_block.1.weight - torch.Size([3, 60, 7, 7])
15:23:42 INFO - <module>: Generator.last_conv_block.1.bias - torch.Size([3])
15:23:42 INFO - <module>: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
15:23:42 INFO - <module>: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
15:23:42 INFO - <module>: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
15:23:42 INFO - <module>: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
15:23:42 INFO - <module>: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
15:23:42 INFO - <module>: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
15:23:42 INFO - <module>: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
15:23:42 INFO - <module>: HYPERPRIOR PARAMETERS
15:23:42 INFO - <module>: H_0 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: a_0 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: b_0 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: H_1 - torch.Size([320, 3, 3])
15:23:42 INFO - <module>: a_1 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: b_1 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: H_2 - torch.Size([320, 3, 3])
15:23:42 INFO - <module>: a_2 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: b_2 - torch.Size([320, 3, 1])
15:23:42 INFO - <module>: H_3 - torch.Size([320, 1, 3])
15:23:42 INFO - <module>: a_3 - torch.Size([320, 1, 1])
15:23:42 INFO - <module>: b_3 - torch.Size([320, 1, 1])
15:23:42 INFO - <module>: DISCRIMINATOR PARAMETERS
15:23:42 INFO - <module>: context_conv.weight - torch.Size([12, 220, 3, 3])
15:23:42 INFO - <module>: context_conv.bias - torch.Size([12])
15:23:42 INFO - <module>: conv1.bias - torch.Size([64])
15:23:42 INFO - <module>: conv1.weight_orig - torch.Size([64, 15, 4, 4])
15:23:42 INFO - <module>: conv2.bias - torch.Size([128])
15:23:42 INFO - <module>: conv2.weight_orig - torch.Size([128, 64, 4, 4])
15:23:42 INFO - <module>: conv3.bias - torch.Size([256])
15:23:42 INFO - <module>: conv3.weight_orig - torch.Size([256, 128, 4, 4])
15:23:42 INFO - <module>: conv4.bias - torch.Size([512])
15:23:42 INFO - <module>: conv4.weight_orig - torch.Size([512, 256, 4, 4])
15:23:42 INFO - <module>: conv_out.weight - torch.Size([1, 512, 1, 1])
15:23:42 INFO - <module>: conv_out.bias - torch.Size([1])
15:23:42 INFO - <module>: Number of trainable parameters: 184268780
15:23:42 INFO - <module>: Estimated size: 737.07512 MB
15:23:42 INFO - <module>: Starting forward pass with input shape [10, 3, 256, 256]
15:23:46 INFO - <module>: Delta t 4.209s
